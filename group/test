
      /*
      给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

      请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

      你可以假设 nums1 和 nums2 不会同时为空。

      示例 1:

      nums1 = [1, 3]
      nums2 = [2]

      则中位数是 2.0
      示例 2:

      nums1 = [1, 2]
      nums2 = [3, 4]

      则中位数是 (2 + 3)/2 = 2.5
      */

      var findMedianSortedArrays = function(nums1, nums2) {
        const total = nums1.length + nums2.length
        let mid = Math.ceil(total/2) - 1;
        let i = 0;
        let j = 0;
        let index = 0;
        let res = null;
        while(i + j <= mid) {
          const numsI = nums1[ i ];
          const numsJ = nums2[ j ];
          let curr;
          if (numsJ === undefined || numsI < numsJ) {
            curr = numsI;
            i++;
          } else {
            curr = numsJ;
            j++
          }
          if (index === mid) {
            if (res !== null) {
              return (res + curr)/2
            } else {
              if (total % 2) {
                return curr;
              } else {
                res = curr;
                mid++;
              }
            }
          }
          index++;
        }
      };
      console.log(findMedianSortedArrays([0], [0]));